import{_ as a,c as l,o,ae as t}from"./chunks/framework.YbMd5chc.js";const u=JSON.parse('{"title":"== 和 === 区别，分别在什么情况使用","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/equal.md","filePath":"javascript/equal.md","lastUpdated":1758027617000}'),c={name:"javascript/equal.md"};function d(i,e,r,s,n,p){return o(),l("div",null,[...e[0]||(e[0]=[t('<h1 id="和-区别-分别在什么情况使用" tabindex="-1">== 和 === 区别，分别在什么情况使用 <a class="header-anchor" href="#和-区别-分别在什么情况使用" aria-label="Permalink to &quot;== 和 === 区别，分别在什么情况使用&quot;">​</a></h1><p><code>==</code> 双等操作符 <code>===</code> 全等操作符</p><p>双等规则 <code>x == y</code></p><ul><li>若两者均为对象，则比较两对象的内存地址是否一致</li><li>若其中一个操作数为对象，另一个为原始值，将对象转换为原始值比较（转换方式为<code>valueOf</code>再<code>toString</code>）</li><li>若两者都为原始值，则将两者都转换为数值进行比较</li><li><code>undefined == null</code></li><li>存在 <code>NaN</code> 比较的情况一律为<code>false</code></li></ul><p>全等规则</p><ul><li>若两者均为对象，比较两者的内存地址</li><li>若两者均为原始值，比较原始值</li><li>两者类型不一致，直接返回<code>false</code></li></ul>',6)])])}const f=a(c,[["render",d]]);export{u as __pageData,f as default};
