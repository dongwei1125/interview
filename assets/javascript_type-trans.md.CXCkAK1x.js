import{_ as e,c as i,o as a,ae as t}from"./chunks/framework.YbMd5chc.js";const k=JSON.parse('{"title":"谈谈 JavaScript 中的类型转换机制","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/type-trans.md","filePath":"javascript/type-trans.md","lastUpdated":1758027617000}'),d={name:"javascript/type-trans.md"};function p(c,s,o,n,l,h){return a(),i("div",null,[...s[0]||(s[0]=[t('<h1 id="谈谈-javascript-中的类型转换机制" tabindex="-1">谈谈 JavaScript 中的类型转换机制 <a class="header-anchor" href="#谈谈-javascript-中的类型转换机制" aria-label="Permalink to &quot;谈谈 JavaScript 中的类型转换机制&quot;">​</a></h1><p><code>JavaScript</code> 中类型转换包括显式类型转化和隐式类型转换</p><p>其中显式类型转换包括数值转换、布尔值转换、字符串转换</p><p>数值转换为</p><p><code>Number</code> 将参数转换为数值，无法转换则为 <code>NaN</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;324d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NaN</span></span></code></pre></div><p><code>parseInt</code> 尽量将参数转换为数值</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;324d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 324</span></span></code></pre></div><p><code>parseFloat</code> 尽量将参数转换为浮点数</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;324.3d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 324.3</span></span></code></pre></div><p>布尔值转换为</p><p><code>0</code> <code>+0</code> <code>-0</code> <code>NaN</code> <code>null</code> <code>undefined</code> <code>&#39;&#39;</code> 均转换为<code>false</code> 其余的均转换为<code>true</code></p><p>字符串转换为</p><p><code>String()</code><code>Object.prototype.toString</code><code>JSON.stringify</code></p><p>隐式类型转换利用的内部抽象方法<code>toPrimitive</code>转换为原始值 主要包括以下几种情况，根据规范内部 <code>tiny</code> 类型分类</p><ul><li><code>number</code>： <code>Number(el)</code> <code>+el</code></li><li><code>string</code>： <code>String(el)</code> <code>`${el}`</code></li><li><code>default</code>： <code>x == y</code> <code>x + y</code></li></ul><p>以上操作均会先将操作数转换为原始值，而转换为原始值的步骤存在两个差异 <code>number/default</code>将先执行操作数<code>valueOf</code>方法，若非原始值，再执行<code>toString</code>方法 <code>string</code>将先执行操作数<code>toString</code>方法，若非原始值，再执行<code>valueOf</code>方法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [].valueOf() ==&gt; [] [].toString() ==&gt; &#39;&#39;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // {}.valueOf() ==&gt; {} {}.toString() ==&gt; &#39;[object Object]&#39;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // &#39;&#39; + &#39;[object Object]&#39; ==&gt; &#39;[object Object]&#39;</span></span></code></pre></div>',18)])])}const g=e(d,[["render",p]]);export{k as __pageData,g as default};
